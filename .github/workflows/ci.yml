name: CMS CI

on:
  push:
    branches: [main, develop, stage, release/**, feature/**, hotfix/**, bugfix/**]
  pull_request:
    branches: [main, develop, stage, release/**, feature/**, hotfix/**, bugfix/**]

env:
  PROJECT_DIR: ./api

jobs:
  build-and-test:
    name: Creating build and running tests...
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: devtasker
          POSTGRES_PASSWORD: devpass
          POSTGRES_DB: devtasker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://devtasker:devpass@localhost:5432/devtasker
      JWT_SECRET: testsecret
    steps:
      - uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.PROJECT_DIR }}

      - name: Generate Prisma Client
        run: npx prisma generate
        working-directory: ${{ env.PROJECT_DIR }}

      - name: Run TypeScript build
        run: npm run build
        working-directory: ${{ env.PROJECT_DIR }}

      - name: Run tests
        run: npm test
        working-directory: ${{ env.PROJECT_DIR }}

  build-and-push:
    name: Making Build and deploying it in registry...
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stage'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          TAG=ghcr.io/${{ github.repository }}/cms:${{ github.sha }}
          docker build -f Dockerfile.dev -t $TAG ./api
          docker push $TAG

  auto-tag:
    name: Auto Tag on Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Extract version from branch name
        id: extract_version
        run: echo "RELEASE_TAG=v${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag $RELEASE_TAG
          git push origin $RELEASE_TAG